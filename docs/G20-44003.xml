<?xml version="1.0" encoding="UTF-8"?>
<modsCollection xmlns="http://www.loc.gov/mods/v3">
<mods ID="Nadim-2020-Evaluating">
    <titleInfo>
        <title>Evaluating Performance of Clone Detection Tools in Detecting Cloned Cochange Candidates</title>
    </titleInfo>
    <name type="personal">
        <namePart type="given">Md</namePart>
        <namePart type="family">Nadim</namePart>
        <role>
            <roleTerm authority="marcrelator" type="text">author</roleTerm>
        </role>
    </name>
    <name type="personal">
        <namePart type="given">Manishankar</namePart>
        <namePart type="family">Mondal</namePart>
        <role>
            <roleTerm authority="marcrelator" type="text">author</roleTerm>
        </role>
    </name>
    <name type="personal">
        <namePart type="given">Chanchal</namePart>
        <namePart type="given">K</namePart>
        <namePart type="family">Roy</namePart>
        <role>
            <roleTerm authority="marcrelator" type="text">author</roleTerm>
        </role>
    </name>
    <originInfo>
        <dateIssued>2020</dateIssued>
    </originInfo>
    <typeOfResource>text</typeOfResource>
    <genre authority="bibutilsgt">journal article</genre>
    <relatedItem type="host">
        <titleInfo>
            <title>2020 IEEE 14th International Workshop on Software Clones (IWSC)</title>
        </titleInfo>
        <originInfo>
            <issuance>continuing</issuance>
            <publisher>IEEE</publisher>
        </originInfo>
        <genre authority="marcgt">periodical</genre>
        <genre authority="bibutilsgt">academic journal</genre>
    </relatedItem>
    <abstract>Code reuse by copying and pasting from one place to another place in a codebase is a very common scenario in software development which is also one of the most typical reasons for introducing code clones. There is a huge availability of tools to detect such cloned fragments and a lot of studies have already been done for efficient clone detection. There are also several studies for evaluating those tools considering their clone detection effectiveness. Unfortunately, we find no study which compares different clone detection tools in the perspective of detecting cloned co-change candidates during software evolution. Detecting cloned co-change candidates is essential for clone tracking. In this study, we wanted to explore this dimension of code clone research. We used six promising clone detection tools to identify cloned and non-cloned co-change candidates from six $C$ and Java-based subject systems and evaluated the performance of those clone detection tools in detecting the cloned co-change fragments. Our findings show that a good clone detector may not perform well in detecting cloned co-change candidates. The amount of unique lines covered by a clone detector and the number of detected clone fragments plays an important role in its performance. The findings of this study can enrich a new dimension of code clone research.</abstract>
    <identifier type="citekey">Nadim-2020-Evaluating</identifier>
    <identifier type="doi">10.1109/iwsc50091.2020.9047639</identifier>
    <location>
        <url>https://aclanthology.org/G20-44003</url>
    </location>
    <part>
        <date>2020</date>
    </part>
</mods>
</modsCollection>
